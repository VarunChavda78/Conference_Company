{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nclass ApiService {\n  getAuthHeaders() {\n    const token = localStorage.getItem('auth_token');\n    return {\n      'Content-Type': 'application/json',\n      ...(token && {\n        Authorization: `Bearer ${token}`\n      })\n    };\n  }\n  async handleResponse(response) {\n    if (!response.ok) {\n      const error = await response.json().catch(() => ({\n        message: 'Network error'\n      }));\n      throw new Error(error.message || `HTTP error! status: ${response.status}`);\n    }\n    return response.json();\n  }\n\n  // Authentication\n  async login(username, password) {\n    const response = await fetch(`${API_BASE_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    const data = await this.handleResponse(response);\n    localStorage.setItem('auth_token', data.token);\n    return data;\n  }\n  logout() {\n    localStorage.removeItem('auth_token');\n  }\n\n  // Bookings\n  async getBookings(date) {\n    const url = date ? `${API_BASE_URL}/bookings?date=${date}` : `${API_BASE_URL}/bookings`;\n    const response = await fetch(url, {\n      headers: this.getAuthHeaders()\n    });\n    return this.handleResponse(response);\n  }\n  async getBookingsByDate(date) {\n    const response = await fetch(`${API_BASE_URL}/bookings/date/${date}`, {\n      headers: this.getAuthHeaders()\n    });\n    return this.handleResponse(response);\n  }\n  async createBooking(bookingData) {\n    const response = await fetch(`${API_BASE_URL}/bookings`, {\n      method: 'POST',\n      headers: this.getAuthHeaders(),\n      body: JSON.stringify(bookingData)\n    });\n    return this.handleResponse(response);\n  }\n  async updateBooking(id, bookingData) {\n    const response = await fetch(`${API_BASE_URL}/bookings/${id}`, {\n      method: 'PUT',\n      headers: this.getAuthHeaders(),\n      body: JSON.stringify(bookingData)\n    });\n    return this.handleResponse(response);\n  }\n  async deleteBooking(id) {\n    const response = await fetch(`${API_BASE_URL}/bookings/${id}`, {\n      method: 'DELETE',\n      headers: this.getAuthHeaders()\n    });\n    await this.handleResponse(response);\n  }\n\n  // Health check\n  async healthCheck() {\n    const response = await fetch(`${API_BASE_URL}/health`);\n    return this.handleResponse(response);\n  }\n}\nexport const apiService = new ApiService();","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","getAuthHeaders","token","localStorage","getItem","Authorization","handleResponse","response","ok","error","json","catch","message","Error","status","login","username","password","fetch","method","headers","body","JSON","stringify","data","setItem","logout","removeItem","getBookings","date","url","getBookingsByDate","createBooking","bookingData","updateBooking","id","deleteBooking","healthCheck","apiService"],"sources":["E:/Conference_Room_Booking/conference-room-booking/src/services/api.ts"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nexport interface LoginResponse {\r\n  token: string;\r\n  user: {\r\n    id: string;\r\n    username: string;\r\n    isOwner: boolean;\r\n  };\r\n}\r\n\r\nexport interface ApiError {\r\n  message: string;\r\n}\r\n\r\nclass ApiService {\r\n  private getAuthHeaders(): HeadersInit {\r\n    const token = localStorage.getItem('auth_token');\r\n    return {\r\n      'Content-Type': 'application/json',\r\n      ...(token && { Authorization: `Bearer ${token}` }),\r\n    };\r\n  }\r\n\r\n  private async handleResponse<T>(response: Response): Promise<T> {\r\n    if (!response.ok) {\r\n      const error: ApiError = await response.json().catch(() => ({ message: 'Network error' }));\r\n      throw new Error(error.message || `HTTP error! status: ${response.status}`);\r\n    }\r\n    return response.json();\r\n  }\r\n\r\n  // Authentication\r\n  async login(username: string, password: string): Promise<LoginResponse> {\r\n    const response = await fetch(`${API_BASE_URL}/auth/login`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ username, password }),\r\n    });\r\n\r\n    const data = await this.handleResponse<LoginResponse>(response);\r\n    localStorage.setItem('auth_token', data.token);\r\n    return data;\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem('auth_token');\r\n  }\r\n\r\n  // Bookings\r\n  async getBookings(date?: string): Promise<any[]> {\r\n    const url = date ? `${API_BASE_URL}/bookings?date=${date}` : `${API_BASE_URL}/bookings`;\r\n    const response = await fetch(url, {\r\n      headers: this.getAuthHeaders(),\r\n    });\r\n\r\n    return this.handleResponse<any[]>(response);\r\n  }\r\n\r\n  async getBookingsByDate(date: string): Promise<any[]> {\r\n    const response = await fetch(`${API_BASE_URL}/bookings/date/${date}`, {\r\n      headers: this.getAuthHeaders(),\r\n    });\r\n\r\n    return this.handleResponse<any[]>(response);\r\n  }\r\n\r\n  async createBooking(bookingData: any): Promise<any> {\r\n    const response = await fetch(`${API_BASE_URL}/bookings`, {\r\n      method: 'POST',\r\n      headers: this.getAuthHeaders(),\r\n      body: JSON.stringify(bookingData),\r\n    });\r\n\r\n    return this.handleResponse<any>(response);\r\n  }\r\n\r\n  async updateBooking(id: string, bookingData: any): Promise<any> {\r\n    const response = await fetch(`${API_BASE_URL}/bookings/${id}`, {\r\n      method: 'PUT',\r\n      headers: this.getAuthHeaders(),\r\n      body: JSON.stringify(bookingData),\r\n    });\r\n\r\n    return this.handleResponse<any>(response);\r\n  }\r\n\r\n  async deleteBooking(id: string): Promise<void> {\r\n    const response = await fetch(`${API_BASE_URL}/bookings/${id}`, {\r\n      method: 'DELETE',\r\n      headers: this.getAuthHeaders(),\r\n    });\r\n\r\n    await this.handleResponse<void>(response);\r\n  }\r\n\r\n  // Health check\r\n  async healthCheck(): Promise<{ status: string; message: string }> {\r\n    const response = await fetch(`${API_BASE_URL}/health`);\r\n    return this.handleResponse<{ status: string; message: string }>(response);\r\n  }\r\n}\r\n\r\nexport const apiService = new ApiService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}